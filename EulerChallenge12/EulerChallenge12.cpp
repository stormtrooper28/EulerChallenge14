// EulerChallenge12.cpp : Defines the entry point for the console application.
/*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

#include "stdafx.h"
#include <iostream>

using namespace std;

int divisorCount(unsigned long long numberToCheck) {
	unsigned long long divisor = 1;
	int count = 0;
	while (divisor < ceil(sqrt(numberToCheck))) {
		if (numberToCheck % divisor == 0)
			count++;
		divisor++;
	}
	return count * 2 + (sqrt(numberToCheck) == floor(sqrt(numberToCheck)) ? 1 : 0); // Above only counts lower multiples
}

int main() {
	unsigned long long triNumber = 0, adder = 0;
	while (true) {
		triNumber += ++adder;
		if (divisorCount(triNumber) >= 500)
			break;
	}

	cout << "The first triangle number with " << divisorCount(triNumber) << " divisors is " << triNumber;

	cin >> triNumber;

    return 0;
}

